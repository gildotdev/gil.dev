---
import { marked } from "marked";
import Tag from "../../components/Tag.astro";
import { formatPublishDate } from "../../lib/utils.ts";
import "../../styles/global.css";
import PostLayout from "../../layouts/PostLayout.astro";

const response = await fetch(`https://micro.blog/micropub?q=source`, {
  method: "GET",
  headers: {
    Authorization: `Bearer ${import.meta.env.SECRET_MICROBLOG_TOKEN}`,
  },
});

let posts = await response.json();

// 2. When it's time to render, you can get the note directly from the prop

let post = posts?.items?.find(
  (post: any) => post.properties.uid[0] == Astro.params["slug"]
);

post = {
  uid: post.properties.uid[0],
  content: marked(post.properties.content[0]),
  published: post.properties.published[0],
  category: post.properties.category,
  title: post.properties.name != "" ? post.properties.name : null,
  canonicalURL: post.properties.url[0],
};

// 1. Generate a new path for every collection note
export async function getStaticPaths() {
  const response = await fetch(
    "https://micro.blog/micropub?q=source&offset=0",
    {
      method: "GET",
      headers: {
        Authorization: `Bearer ${import.meta.env.SECRET_MICROBLOG_TOKEN}`,
      },
    }
  );

  let posts = await response.json();
  posts = posts.items.map((post: any) => {
    post.properties.content[0] = marked(post.properties.content[0]);
    return post;
  });

  const slugs = posts.map((post: any) => ({
    params: {
      slug: post.properties.uid[0],
    },
  }));

  return slugs;
}
---

<PostLayout
  title={post?.title || formatPublishDate(post.published)}
  canonicalURL={post.canonicalURL}
>
  <article>
    <div class="flex flex-col md:flex-row justify-start gap-1 align-bottom">
      {
        post?.title && (
          <time class="slab" datetime={post.published}>
            {formatPublishDate(post.published)}
          </time>
        )
      }
    </div>
    <Fragment set:html={post.content} />
    {
      post?.category?.length > 0 && (
        <p>
          Category:{" "}
          {post?.category.map((tag: any, i: number) => (
            <Tag tag={tag} i={i} />
          ))}
        </p>
      )
    }
  </article>
</PostLayout>
